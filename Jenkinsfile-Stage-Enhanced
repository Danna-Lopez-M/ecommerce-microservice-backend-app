pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-registry'
        SERVICE_NAME = 'user-service'
        VERSION = "${env.BUILD_NUMBER}"
        KUBECONFIG = credentials('kubeconfig-stage')
        STAGE_NAMESPACE = 'ecommerce-stage'
        TEST_RESULTS_DIR = 'test-results'
        PERFORMANCE_RESULTS_DIR = 'performance-results'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'develop',
                    url: 'https://github.com/SelimHorri/ecommerce-microservice-backend-app.git'
            }
        }
        
        stage('Build Application') {
            steps {
                dir('user-service') {
                    sh '''
                        mvn clean package -DskipTests
                    '''
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                dir('user-service') {
                    sh '''
                        mvn test -Dtest=**/*UnitTest
                    '''
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    publishHTML([
                        reportDir: 'target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'Unit Test Coverage Report'
                    ])
                }
            }
        }
        
        stage('Run Integration Tests') {
            steps {
                dir('user-service') {
                    sh '''
                        mvn test -Dtest=**/*IntegrationTest
                    '''
                }
            }
            post {
                always {
                    junit '**/target/failsafe-reports/*.xml'
                    publishHTML([
                        reportDir: 'target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'Integration Test Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('user-service') {
                    script {
                        dockerImage = docker.build("${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION}")
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    sh """
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                        aquasec/trivy image \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        ${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION}
                    """
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                script {
                    docker.withRegistry('', 'docker-credentials') {
                        dockerImage.push("${VERSION}")
                        dockerImage.push('stage-latest')
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes Stage') {
            steps {
                script {
                    sh """
                        kubectl config use-context stage
                        kubectl set image deployment/${SERVICE_NAME} \
                            ${SERVICE_NAME}=${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION} \
                            -n ${STAGE_NAMESPACE}
                        kubectl rollout status deployment/${SERVICE_NAME} -n ${STAGE_NAMESPACE}
                    """
                }
            }
        }
        
        stage('Wait for Deployment') {
            steps {
                script {
                    sh """
                        kubectl wait --for=condition=available --timeout=300s \
                        deployment/${SERVICE_NAME} -n ${STAGE_NAMESPACE}
                    """
                    sleep(time: 30, unit: 'SECONDS')
                }
            }
        }
        
        stage('Run E2E Tests') {
            steps {
                script {
                    sh """
                        export SERVICE_URL=\$(kubectl get service ${SERVICE_NAME} \
                            -n ${STAGE_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                        
                        # Run E2E tests against stage environment
                        mvn test -Dtest=**/*E2ETest -Dservice.url=http://\${SERVICE_URL}:8080
                    """
                }
            }
            post {
                always {
                    junit '**/target/e2e-reports/*.xml'
                    publishHTML([
                        reportDir: 'target/site/serenity',
                        reportFiles: 'index.html',
                        reportName: 'E2E Test Report'
                    ])
                }
            }
        }
        
        stage('Performance Tests') {
            steps {
                script {
                    sh """
                        export SERVICE_URL=\$(kubectl get service ${SERVICE_NAME} \
                            -n ${STAGE_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                        
                        # Run comprehensive performance tests
                        python3 src/test/java/com/selimhorri/app/PerformanceTestRunner.py \
                            --url=http://\${SERVICE_URL}:8080 \
                            --scenario all
                    """
                }
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'performance-results',
                        reportFiles: '*_report.html',
                        reportName: 'Performance Test Report'
                    ])
                    archiveArtifacts artifacts: 'performance-results/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('Validate Performance Metrics') {
            steps {
                script {
                    sh '''
                        python3 - << EOF
import csv
import sys

# Read Locust stats
try:
    with open('performance-results/*_stats_stats.csv', 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['Type'] == 'Aggregated':
                avg_response = float(row['Average Response Time'])
                failure_rate = float(row['Failure Rate'])
                rps = float(row['Requests/s'])
                
                print(f"Performance Metrics:")
                print(f"  Average Response Time: {avg_response}ms")
                print(f"  Failure Rate: {failure_rate}%")
                print(f"  Requests per Second: {rps}")
                
                # Validate thresholds
                if avg_response > 2000:
                    print("❌ Average response time exceeds 2000ms")
                    sys.exit(1)
                if failure_rate > 5:
                    print("❌ Failure rate exceeds 5%")
                    sys.exit(1)
                if rps < 10:
                    print("❌ RPS below 10")
                    sys.exit(1)
                
                print("✅ Performance tests passed!")
                break
except Exception as e:
    print(f"Error analyzing performance results: {e}")
    sys.exit(1)
EOF
                    '''
                }
            }
        }
        
        stage('Load Testing') {
            steps {
                script {
                    sh """
                        export SERVICE_URL=\$(kubectl get service ${SERVICE_NAME} \
                            -n ${STAGE_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                        
                        # Run load tests with higher load
                        python3 src/test/java/com/selimhorri/app/PerformanceTestRunner.py \
                            --url=http://\${SERVICE_URL}:8080 \
                            --scenario stress
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'performance-results/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('Database Migration Test') {
            steps {
                script {
                    sh """
                        # Test database migrations
                        kubectl exec -n ${STAGE_NAMESPACE} deployment/${SERVICE_NAME} -- \
                            java -jar /app/migration-tool.jar --validate
                    """
                }
            }
        }
        
        stage('Monitoring Setup') {
            steps {
                script {
                    sh """
                        # Setup monitoring and alerting
                        kubectl apply -f k8s/monitoring/ -n ${STAGE_NAMESPACE}
                        
                        # Verify monitoring is working
                        kubectl get pods -n ${STAGE_NAMESPACE} -l app=monitoring
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo "Stage deployment ${VERSION} completed successfully!"
            emailext(
                to: 'stage-team@example.com',
                subject: "✅ Stage Deployment Success: ${SERVICE_NAME} v${VERSION}",
                body: """
                    Stage deployment completed successfully!
                    
                    Service: ${SERVICE_NAME}
                    Version: ${VERSION}
                    Build: #${BUILD_NUMBER}
                    
                    Test Results:
                    - Unit Tests: Passed
                    - Integration Tests: Passed
                    - E2E Tests: Passed
                    - Performance Tests: Passed
                    - Load Tests: Passed
                    
                    Environment: ${STAGE_NAMESPACE}
                    URL: http://stage.ecommerce.com
                """,
                attachmentsPattern: 'test-results/**/*,performance-results/**/*'
            )
        }
        failure {
            echo "Stage deployment ${VERSION} failed!"
            emailext(
                to: 'stage-team@example.com',
                subject: "❌ Stage Deployment Failed: ${SERVICE_NAME} v${VERSION}",
                body: "Stage deployment failed. Check logs for details."
            )
        }
        always {
            cleanWs()
        }
    }
}
