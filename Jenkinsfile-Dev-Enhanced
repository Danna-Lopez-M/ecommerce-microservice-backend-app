pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-registry'
        SERVICE_NAME = 'user-service'
        VERSION = "${env.BUILD_NUMBER}"
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=true'
        TEST_RESULTS_DIR = 'test-results'
        PERFORMANCE_RESULTS_DIR = 'performance-results'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'develop',
                    url: 'https://github.com/SelimHorri/ecommerce-microservice-backend-app.git'
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                script {
                    // SonarQube analysis
                    sh '''
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${SERVICE_NAME} \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_TOKEN}
                    '''
                }
            }
        }
        
        stage('Build Application') {
            steps {
                dir('user-service') {
                    sh '''
                        mvn clean package -DskipTests
                    '''
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir('user-service') {
                    sh '''
                        mvn test -Dtest=**/*UnitTest
                    '''
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    publishHTML([
                        reportDir: 'target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'Unit Test Coverage Report'
                    ])
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                dir('user-service') {
                    sh '''
                        mvn test -Dtest=**/*IntegrationTest
                    '''
                }
            }
            post {
                always {
                    junit '**/target/failsafe-reports/*.xml'
                    publishHTML([
                        reportDir: 'target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'Integration Test Coverage Report'
                    ])
                }
            }
        }
        
        stage('E2E Tests') {
            steps {
                script {
                    // Start required services for E2E tests
                    sh '''
                        docker-compose -f docker-compose.test.yml up -d
                        sleep 30
                    '''
                    
                    dir('user-service') {
                        sh '''
                            mvn test -Dtest=**/*E2ETest
                        '''
                    }
                }
            }
            post {
                always {
                    junit '**/target/e2e-reports/*.xml'
                    sh 'docker-compose -f docker-compose.test.yml down'
                }
            }
        }
        
        stage('Performance Tests') {
            steps {
                script {
                    // Start services for performance testing
                    sh '''
                        docker-compose -f docker-compose.perf.yml up -d
                        sleep 60
                    '''
                    
                    // Run performance tests
                    sh '''
                        python3 src/test/java/com/selimhorri/app/PerformanceTestRunner.py \
                            --url http://localhost:8080 \
                            --scenario quick
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'performance-results/**/*', allowEmptyArchive: true
                    publishHTML([
                        reportDir: 'performance-results',
                        reportFiles: '*_report.html',
                        reportName: 'Performance Test Report'
                    ])
                    sh 'docker-compose -f docker-compose.perf.yml down'
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    // OWASP dependency check
                    sh '''
                        mvn org.owasp:dependency-check-maven:check
                    '''
                    
                    // Docker image security scan
                    sh '''
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                        aquasec/trivy image \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        ${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION}
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'target/dependency-check-report.html', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('user-service') {
                    script {
                        dockerImage = docker.build("${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION}")
                    }
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                script {
                    docker.withRegistry('', 'docker-credentials') {
                        dockerImage.push("${VERSION}")
                        dockerImage.push('dev-latest')
                    }
                }
            }
        }
        
        stage('Deploy to Dev Environment') {
            steps {
                script {
                    sh '''
                        kubectl config use-context dev
                        kubectl set image deployment/${SERVICE_NAME} \
                            ${SERVICE_NAME}=${DOCKER_REGISTRY}/${SERVICE_NAME}:${VERSION} \
                            -n ecommerce-dev
                        kubectl rollout status deployment/${SERVICE_NAME} -n ecommerce-dev
                    '''
                }
            }
        }
        
        stage('Smoke Tests') {
            steps {
                script {
                    sh '''
                        export SERVICE_URL=\$(kubectl get service ${SERVICE_NAME} \
                            -n ecommerce-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                        
                        # Health check
                        curl -f http://\${SERVICE_URL}:8080/actuator/health || exit 1
                        
                        # Basic endpoint test
                        curl -f http://\${SERVICE_URL}:8080/api/users || exit 1
                        
                        echo "Smoke tests passed!"
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo "Dev deployment ${VERSION} completed successfully!"
            emailext(
                to: 'dev-team@example.com',
                subject: "✅ Dev Deployment Success: ${SERVICE_NAME} v${VERSION}",
                body: """
                    Dev deployment completed successfully!
                    
                    Service: ${SERVICE_NAME}
                    Version: ${VERSION}
                    Build: #${BUILD_NUMBER}
                    
                    Test Results:
                    - Unit Tests: Passed
                    - Integration Tests: Passed
                    - E2E Tests: Passed
                    - Performance Tests: Passed
                    - Security Scan: Passed
                """,
                attachmentsPattern: 'test-results/**/*,performance-results/**/*'
            )
        }
        failure {
            echo "Dev deployment ${VERSION} failed!"
            emailext(
                to: 'dev-team@example.com',
                subject: "❌ Dev Deployment Failed: ${SERVICE_NAME} v${VERSION}",
                body: "Dev deployment failed. Check logs for details."
            )
        }
        always {
            cleanWs()
        }
    }
}
